

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Oct 04 14:41:06 2021

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    10                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    11  0000                     
    12                           ; Version 2.10
    13                           ; Generated 31/07/2019 GMT
    14                           ; 
    15                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC18F2550 Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     _PORTAbits	set	3968
    47  0000                     _TRISAbits	set	3986
    48  0000                     _TRISB	set	3987
    49  0000                     _ADCON1	set	4033
    50  0000                     _LATB	set	3978
    51                           
    52                           ; #config settings
    53  0000                     
    54                           	psect	cinit
    55  007EC4                     __pcinit:
    56                           	opt callstack 0
    57  007EC4                     start_initialization:
    58                           	opt callstack 0
    59  007EC4                     __initialization:
    60                           	opt callstack 0
    61  007EC4                     end_of_initialization:
    62                           	opt callstack 0
    63  007EC4                     __end_of__initialization:
    64                           	opt callstack 0
    65  007EC4  0100               	movlb	0
    66  007EC6  EF65  F03F         	goto	_main	;jump to C main() function
    67                           
    68                           	psect	cstackCOMRAM
    69  000001                     __pcstackCOMRAM:
    70                           	opt callstack 0
    71  000001                     display@num:
    72                           	opt callstack 0
    73                           
    74                           ; 2 bytes @ 0x0
    75  000001                     	ds	2
    76  000003                     ??_main:
    77                           
    78                           ; 1 bytes @ 0x2
    79  000003                     	ds	2
    80                           
    81 ;;
    82 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
    83 ;;
    84 ;; *************** function _main *****************
    85 ;; Defined at:
    86 ;;		line 50 in file "PIC_numero_ascendente.c"
    87 ;; Parameters:    Size  Location     Type
    88 ;;		None
    89 ;; Auto vars:     Size  Location     Type
    90 ;;  resultado       2    0        int 
    91 ;; Return value:  Size  Location     Type
    92 ;;                  1    wreg      void 
    93 ;; Registers used:
    94 ;;		wreg, status,2, status,0, cstack
    95 ;; Tracked objects:
    96 ;;		On entry : 0/0
    97 ;;		On exit  : 0/0
    98 ;;		Unchanged: 0/0
    99 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   100 ;;      Params:         0       0       0       0       0       0       0       0       0
   101 ;;      Locals:         2       0       0       0       0       0       0       0       0
   102 ;;      Temps:          2       0       0       0       0       0       0       0       0
   103 ;;      Totals:         4       0       0       0       0       0       0       0       0
   104 ;;Total ram usage:        4 bytes
   105 ;; Hardware stack levels required when called:    1
   106 ;; This function calls:
   107 ;;		_display
   108 ;; This function is called by:
   109 ;;		Startup code after reset
   110 ;; This function uses a non-reentrant model
   111 ;;
   112                           
   113                           	psect	text0
   114  007ECA                     __ptext0:
   115                           	opt callstack 0
   116  007ECA                     _main:
   117                           	opt callstack 30
   118  007ECA                     
   119                           ;PIC_numero_ascendente.c: 52:         int resultado = 0;
   120  007ECA  0E0F               	movlw	15
   121  007ECC  6EC1               	movwf	193,c	;volatile
   122                           
   123                           ;PIC_numero_ascendente.c: 53: 
   124  007ECE  0E00               	movlw	0
   125  007ED0  6E93               	movwf	147,c	;volatile
   126  007ED2                     
   127                           ;PIC_numero_ascendente.c: 54:         if(PORTAbits.RA2 == 1){
   128  007ED2  8492               	bsf	146,2,c	;volatile
   129  007ED4                     
   130                           ;PIC_numero_ascendente.c: 55:             resultado + 1;
   131  007ED4  8692               	bsf	146,3,c	;volatile
   132  007ED6                     
   133                           ;PIC_numero_ascendente.c: 56:         }
   134  007ED6  8892               	bsf	146,4,c	;volatile
   135  007ED8                     
   136                           ;PIC_numero_ascendente.c: 57:         if(PORTAbits.RA3 == 1){
   137  007ED8  8A92               	bsf	146,5,c	;volatile
   138  007EDA                     l30:
   139  007EDA                     
   140                           ;PIC_numero_ascendente.c: 68:         _delay((unsigned long)((500)*(48000000/4000.0)));
   141  007EDA  5080               	movf	128,w,c	;volatile
   142  007EDC                     
   143                           ;PIC_numero_ascendente.c: 71: }
   144  007EDC  5080               	movf	128,w,c	;volatile
   145  007EDE  5080               	movf	128,w,c	;volatile
   146  007EE0  5080               	movf	128,w,c	;volatile
   147  007EE2  0E00               	movlw	0
   148  007EE4  6E02               	movwf	(display@num+1)^0,c
   149  007EE6  0E00               	movlw	0
   150  007EE8  6E01               	movwf	display@num^0,c
   151  007EEA  EC87  F03F         	call	_display	;wreg free
   152  007EEE  0E1F               	movlw	31
   153  007EF0  6E04               	movwf	(??_main+1)^0,c
   154  007EF2  0E71               	movlw	113
   155  007EF4  6E03               	movwf	??_main^0,c
   156  007EF6  0E1E               	movlw	30
   157  007EF8                     u217:
   158  007EF8  2EE8               	decfsz	wreg,f,c
   159  007EFA  D7FE               	bra	u217
   160  007EFC  2E03               	decfsz	??_main^0,f,c
   161  007EFE  D7FC               	bra	u217
   162  007F00  2E04               	decfsz	(??_main+1)^0,f,c
   163  007F02  D7FA               	bra	u217
   164  007F04  D000               	nop2	
   165  007F06  EF6D  F03F         	goto	l30
   166  007F0A  EF00  F000         	goto	start
   167  007F0E                     __end_of_main:
   168                           	opt callstack 0
   169                           
   170 ;; *************** function _display *****************
   171 ;; Defined at:
   172 ;;		line 15 in file "PIC_numero_ascendente.c"
   173 ;; Parameters:    Size  Location     Type
   174 ;;  num             2    0[COMRAM] int 
   175 ;; Auto vars:     Size  Location     Type
   176 ;;		None
   177 ;; Return value:  Size  Location     Type
   178 ;;                  1    wreg      void 
   179 ;; Registers used:
   180 ;;		wreg, status,2, status,0
   181 ;; Tracked objects:
   182 ;;		On entry : 0/0
   183 ;;		On exit  : 0/0
   184 ;;		Unchanged: 0/0
   185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   186 ;;      Params:         2       0       0       0       0       0       0       0       0
   187 ;;      Locals:         0       0       0       0       0       0       0       0       0
   188 ;;      Temps:          0       0       0       0       0       0       0       0       0
   189 ;;      Totals:         2       0       0       0       0       0       0       0       0
   190 ;;Total ram usage:        2 bytes
   191 ;; Hardware stack levels used:    1
   192 ;; This function calls:
   193 ;;		Nothing
   194 ;; This function is called by:
   195 ;;		_main
   196 ;; This function uses a non-reentrant model
   197 ;;
   198                           
   199                           	psect	text1
   200  007F0E                     __ptext1:
   201                           	opt callstack 0
   202  007F0E                     _display:
   203                           	opt callstack 30
   204  007F0E                     
   205                           ;PIC_numero_ascendente.c: 16:     if(num == 4){
   206  007F0E  0E00               	movlw	0
   207  007F10  6E8A               	movwf	138,c	;volatile
   208  007F12                     
   209                           ;PIC_numero_ascendente.c: 18:     }
   210  007F12  5001               	movf	display@num^0,w,c
   211  007F14  1002               	iorwf	(display@num+1)^0,w,c
   212  007F16  A4D8               	btfss	status,2,c
   213  007F18  EF90  F03F         	goto	u111
   214  007F1C  EF92  F03F         	goto	u110
   215  007F20                     u111:
   216  007F20  EF94  F03F         	goto	l777
   217  007F24                     u110:
   218  007F24                     
   219                           ;PIC_numero_ascendente.c: 19:     if(num == 5){
   220  007F24  0E3F               	movlw	63
   221  007F26  6E8A               	movwf	138,c	;volatile
   222  007F28                     l777:
   223                           
   224                           ;PIC_numero_ascendente.c: 21:     }
   225  007F28  0401               	decf	display@num^0,w,c
   226  007F2A  1002               	iorwf	(display@num+1)^0,w,c
   227  007F2C  A4D8               	btfss	status,2,c
   228  007F2E  EF9B  F03F         	goto	u121
   229  007F32  EF9D  F03F         	goto	u120
   230  007F36                     u121:
   231  007F36  EF9F  F03F         	goto	l781
   232  007F3A                     u120:
   233  007F3A                     
   234                           ;PIC_numero_ascendente.c: 22:     if(num == 6){
   235  007F3A  0E06               	movlw	6
   236  007F3C  6E8A               	movwf	138,c	;volatile
   237  007F3E                     l781:
   238                           
   239                           ;PIC_numero_ascendente.c: 24:     }
   240  007F3E  0E02               	movlw	2
   241  007F40  1801               	xorwf	display@num^0,w,c
   242  007F42  1002               	iorwf	(display@num+1)^0,w,c
   243  007F44  A4D8               	btfss	status,2,c
   244  007F46  EFA7  F03F         	goto	u131
   245  007F4A  EFA9  F03F         	goto	u130
   246  007F4E                     u131:
   247  007F4E  EFAB  F03F         	goto	l785
   248  007F52                     u130:
   249  007F52                     
   250                           ;PIC_numero_ascendente.c: 25:     if(num == 7){
   251  007F52  0E5B               	movlw	91
   252  007F54  6E8A               	movwf	138,c	;volatile
   253  007F56                     l785:
   254                           
   255                           ;PIC_numero_ascendente.c: 27:     }
   256  007F56  0E03               	movlw	3
   257  007F58  1801               	xorwf	display@num^0,w,c
   258  007F5A  1002               	iorwf	(display@num+1)^0,w,c
   259  007F5C  A4D8               	btfss	status,2,c
   260  007F5E  EFB3  F03F         	goto	u141
   261  007F62  EFB5  F03F         	goto	u140
   262  007F66                     u141:
   263  007F66  EFB7  F03F         	goto	l789
   264  007F6A                     u140:
   265  007F6A                     
   266                           ;PIC_numero_ascendente.c: 28:     if(num == 8){
   267  007F6A  0E4F               	movlw	79
   268  007F6C  6E8A               	movwf	138,c	;volatile
   269  007F6E                     l789:
   270                           
   271                           ;PIC_numero_ascendente.c: 30:     }
   272  007F6E  0E04               	movlw	4
   273  007F70  1801               	xorwf	display@num^0,w,c
   274  007F72  1002               	iorwf	(display@num+1)^0,w,c
   275  007F74  A4D8               	btfss	status,2,c
   276  007F76  EFBF  F03F         	goto	u151
   277  007F7A  EFC1  F03F         	goto	u150
   278  007F7E                     u151:
   279  007F7E  EFC3  F03F         	goto	l793
   280  007F82                     u150:
   281  007F82                     
   282                           ;PIC_numero_ascendente.c: 31:     if(num == 9){
   283  007F82  0E66               	movlw	102
   284  007F84  6E8A               	movwf	138,c	;volatile
   285  007F86                     l793:
   286                           
   287                           ;PIC_numero_ascendente.c: 33:     }
   288  007F86  0E05               	movlw	5
   289  007F88  1801               	xorwf	display@num^0,w,c
   290  007F8A  1002               	iorwf	(display@num+1)^0,w,c
   291  007F8C  A4D8               	btfss	status,2,c
   292  007F8E  EFCB  F03F         	goto	u161
   293  007F92  EFCD  F03F         	goto	u160
   294  007F96                     u161:
   295  007F96  EFCF  F03F         	goto	l797
   296  007F9A                     u160:
   297  007F9A                     
   298                           ;PIC_numero_ascendente.c: 34: }
   299  007F9A  0E6D               	movlw	109
   300  007F9C  6E8A               	movwf	138,c	;volatile
   301  007F9E                     l797:
   302                           
   303                           ;PIC_numero_ascendente.c: 36: void main(void) {
   304  007F9E  0E06               	movlw	6
   305  007FA0  1801               	xorwf	display@num^0,w,c
   306  007FA2  1002               	iorwf	(display@num+1)^0,w,c
   307  007FA4  A4D8               	btfss	status,2,c
   308  007FA6  EFD7  F03F         	goto	u171
   309  007FAA  EFD9  F03F         	goto	u170
   310  007FAE                     u171:
   311  007FAE  EFDB  F03F         	goto	l801
   312  007FB2                     u170:
   313  007FB2                     
   314                           ;PIC_numero_ascendente.c: 37: 
   315  007FB2  0E7D               	movlw	125
   316  007FB4  6E8A               	movwf	138,c	;volatile
   317  007FB6                     l801:
   318                           
   319                           ;PIC_numero_ascendente.c: 39:     TRISB=0b00000000;
   320  007FB6  0E07               	movlw	7
   321  007FB8  1801               	xorwf	display@num^0,w,c
   322  007FBA  1002               	iorwf	(display@num+1)^0,w,c
   323  007FBC  A4D8               	btfss	status,2,c
   324  007FBE  EFE3  F03F         	goto	u181
   325  007FC2  EFE5  F03F         	goto	u180
   326  007FC6                     u181:
   327  007FC6  EFE7  F03F         	goto	l805
   328  007FCA                     u180:
   329  007FCA                     
   330                           ;PIC_numero_ascendente.c: 40:     TRISAbits.TRISA2 = 1;
   331  007FCA  0E07               	movlw	7
   332  007FCC  6E8A               	movwf	138,c	;volatile
   333  007FCE                     l805:
   334                           
   335                           ;PIC_numero_ascendente.c: 42:     TRISAbits.TRISA4 = 1;
   336  007FCE  0E08               	movlw	8
   337  007FD0  1801               	xorwf	display@num^0,w,c
   338  007FD2  1002               	iorwf	(display@num+1)^0,w,c
   339  007FD4  A4D8               	btfss	status,2,c
   340  007FD6  EFEF  F03F         	goto	u191
   341  007FDA  EFF1  F03F         	goto	u190
   342  007FDE                     u191:
   343  007FDE  EFF3  F03F         	goto	l809
   344  007FE2                     u190:
   345  007FE2                     
   346                           ;PIC_numero_ascendente.c: 43:     TRISAbits.TRISA5 = 1;
   347  007FE2  0E7F               	movlw	127
   348  007FE4  6E8A               	movwf	138,c	;volatile
   349  007FE6                     l809:
   350                           
   351                           ;PIC_numero_ascendente.c: 45:     while(1){
   352  007FE6  0E09               	movlw	9
   353  007FE8  1801               	xorwf	display@num^0,w,c
   354  007FEA  1002               	iorwf	(display@num+1)^0,w,c
   355  007FEC  A4D8               	btfss	status,2,c
   356  007FEE  EFFB  F03F         	goto	u201
   357  007FF2  EFFD  F03F         	goto	u200
   358  007FF6                     u201:
   359  007FF6  EFFF  F03F         	goto	l25
   360  007FFA                     u200:
   361  007FFA                     
   362                           ;PIC_numero_ascendente.c: 46: 
   363  007FFA  0E67               	movlw	103
   364  007FFC  6E8A               	movwf	138,c	;volatile
   365  007FFE                     l25:
   366  007FFE  0012               	return		;funcret
   367  008000                     __end_of_display:
   368                           	opt callstack 0
   369  0000                     
   370                           	psect	rparam
   371  0000                     tosu	equ	0xFFF
   372                           tosh	equ	0xFFE
   373                           tosl	equ	0xFFD
   374                           stkptr	equ	0xFFC
   375                           pclatu	equ	0xFFB
   376                           pclath	equ	0xFFA
   377                           pcl	equ	0xFF9
   378                           tblptru	equ	0xFF8
   379                           tblptrh	equ	0xFF7
   380                           tblptrl	equ	0xFF6
   381                           tablat	equ	0xFF5
   382                           prodh	equ	0xFF4
   383                           prodl	equ	0xFF3
   384                           indf0	equ	0xFEF
   385                           postinc0	equ	0xFEE
   386                           postdec0	equ	0xFED
   387                           preinc0	equ	0xFEC
   388                           plusw0	equ	0xFEB
   389                           fsr0h	equ	0xFEA
   390                           fsr0l	equ	0xFE9
   391                           wreg	equ	0xFE8
   392                           indf1	equ	0xFE7
   393                           postinc1	equ	0xFE6
   394                           postdec1	equ	0xFE5
   395                           preinc1	equ	0xFE4
   396                           plusw1	equ	0xFE3
   397                           fsr1h	equ	0xFE2
   398                           fsr1l	equ	0xFE1
   399                           bsr	equ	0xFE0
   400                           indf2	equ	0xFDF
   401                           postinc2	equ	0xFDE
   402                           postdec2	equ	0xFDD
   403                           preinc2	equ	0xFDC
   404                           plusw2	equ	0xFDB
   405                           fsr2h	equ	0xFDA
   406                           fsr2l	equ	0xFD9
   407                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      6       6
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_display

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     319
                                              2 COMRAM     4     4      0
                            _display
 ---------------------------------------------------------------------------------
 (1) _display                                              2     0      2     296
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _display

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      6       6       1        6.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Oct 04 14:41:06 2021

                     l30 7EDA                       l31 7EDC                       l32 7EDE  
                     l25 7FFE                       l33 7EE0                      l801 7FB6  
                    l811 7FFA                      l803 7FCA                      l805 7FCE  
                    l821 7ED8                      l813 7ECA                      l807 7FE2  
                    l823 7EDA                      l815 7ED2                      l809 7FE6  
                    l825 7EE2                      l817 7ED4                      l771 7F0E  
                    l827 7EEE                      l819 7ED6                      l781 7F3E  
                    l773 7F12                      l791 7F82                      l783 7F52  
                    l775 7F24                      l793 7F86                      l785 7F56  
                    l777 7F28                      l795 7F9A                      l787 7F6A  
                    l779 7F3A                      l797 7F9E                      l789 7F6E  
                    l799 7FB2                      u110 7F24                      u111 7F20  
                    u200 7FFA                      u120 7F3A                      u201 7FF6  
                    u121 7F36                      u130 7F52                      u131 7F4E  
                    u140 7F6A                      u141 7F66                      u150 7F82  
                    u151 7F7E                      u160 7F9A                      u161 7F96  
                    u217 7EF8                      u170 7FB2                      u171 7FAE  
                    u180 7FCA                      u181 7FC6                      u190 7FE2  
                    u191 7FDE                      wreg 000FE8             __CFG_LVP$OFF 000000  
                   _LATB 000F8A                     _main 7ECA                     start 0000  
           ___param_bank 000000            __CFG_PLLDIV$5 000000                    ?_main 0001  
                  _TRISB 000F93          __end_of_display 8000                    status 000FD8  
        __initialization 7EC4             __end_of_main 7F0E                   ??_main 0003  
          __activetblptr 000000                   _ADCON1 000FC1                ??_display 0003  
             __accesstop 0060  __end_of__initialization 7EC4            ___rparam_used 000001  
         __pcstackCOMRAM 0001                  __Hparam 0000                  __Lparam 0000  
                __pcinit 7EC4                  __ramtop 0800                  __ptext0 7ECA  
                __ptext1 7F0E                  _display 7F0E     end_of_initialization 7EC4  
              _PORTAbits 000F80                _TRISAbits 000F92               display@num 0001  
    start_initialization 7EC4                 ?_display 0001                 __Hrparam 0000  
               __Lrparam 0000         __size_of_display 00F2            __size_of_main 0044  
  __CFG_CPUDIV$OSC1_PLL2 000000       __CFG_FOSC$HSPLL_HS 000000  
