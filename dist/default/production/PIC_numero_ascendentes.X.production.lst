

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Oct 04 13:50:55 2021

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    10                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    11  0000                     
    12                           ; Version 2.10
    13                           ; Generated 31/07/2019 GMT
    14                           ; 
    15                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC18F2550 Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     _TRISB	set	3987
    47  0000                     _LATB	set	3978
    48                           
    49                           ; #config settings
    50  0000                     
    51                           	psect	cinit
    52  007EB2                     __pcinit:
    53                           	opt callstack 0
    54  007EB2                     start_initialization:
    55                           	opt callstack 0
    56  007EB2                     __initialization:
    57                           	opt callstack 0
    58  007EB2                     end_of_initialization:
    59                           	opt callstack 0
    60  007EB2                     __end_of__initialization:
    61                           	opt callstack 0
    62  007EB2  0100               	movlb	0
    63  007EB4  EF5C  F03F         	goto	_main	;jump to C main() function
    64                           
    65                           	psect	cstackCOMRAM
    66  000001                     __pcstackCOMRAM:
    67                           	opt callstack 0
    68  000001                     display@num:
    69                           	opt callstack 0
    70                           
    71                           ; 2 bytes @ 0x0
    72  000001                     	ds	2
    73  000003                     ??_main:
    74                           
    75                           ; 1 bytes @ 0x2
    76  000003                     	ds	2
    77  000005                     main@num:
    78                           	opt callstack 0
    79                           
    80                           ; 2 bytes @ 0x4
    81  000005                     	ds	2
    82                           
    83 ;;
    84 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
    85 ;;
    86 ;; *************** function _main *****************
    87 ;; Defined at:
    88 ;;		line 50 in file "PIC_numero_ascendente.c"
    89 ;; Parameters:    Size  Location     Type
    90 ;;		None
    91 ;; Auto vars:     Size  Location     Type
    92 ;;  num             2    4[COMRAM] int 
    93 ;; Return value:  Size  Location     Type
    94 ;;                  1    wreg      void 
    95 ;; Registers used:
    96 ;;		wreg, status,2, status,0, cstack
    97 ;; Tracked objects:
    98 ;;		On entry : 0/0
    99 ;;		On exit  : 0/0
   100 ;;		Unchanged: 0/0
   101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   102 ;;      Params:         0       0       0       0       0       0       0       0       0
   103 ;;      Locals:         2       0       0       0       0       0       0       0       0
   104 ;;      Temps:          2       0       0       0       0       0       0       0       0
   105 ;;      Totals:         4       0       0       0       0       0       0       0       0
   106 ;;Total ram usage:        4 bytes
   107 ;; Hardware stack levels required when called:    1
   108 ;; This function calls:
   109 ;;		_display
   110 ;; This function is called by:
   111 ;;		Startup code after reset
   112 ;; This function uses a non-reentrant model
   113 ;;
   114                           
   115                           	psect	text0
   116  007EB8                     __ptext0:
   117                           	opt callstack 0
   118  007EB8                     _main:
   119                           	opt callstack 30
   120  007EB8  0E00               	movlw	0
   121  007EBA  6E93               	movwf	147,c	;volatile
   122  007EBC                     l24:
   123  007EBC  0E00               	movlw	0
   124  007EBE  6E06               	movwf	(main@num+1)^0,c
   125  007EC0  0E00               	movlw	0
   126  007EC2  6E05               	movwf	main@num^0,c
   127  007EC4                     l809:
   128  007EC4  C005  F001         	movff	main@num,display@num
   129  007EC8  C006  F002         	movff	main@num+1,display@num+1
   130  007ECC  EC87  F03F         	call	_display	;wreg free
   131  007ED0  0E25               	movlw	37
   132  007ED2  6E04               	movwf	(??_main+1)^0,c
   133  007ED4  0E87               	movlw	135
   134  007ED6  6E03               	movwf	??_main^0,c
   135  007ED8  0E8C               	movlw	140
   136  007EDA                     u237:
   137  007EDA  2EE8               	decfsz	wreg,f,c
   138  007EDC  D7FE               	bra	u237
   139  007EDE  2E03               	decfsz	??_main^0,f,c
   140  007EE0  D7FC               	bra	u237
   141  007EE2  2E04               	decfsz	(??_main+1)^0,f,c
   142  007EE4  D7FA               	bra	u237
   143  007EE6  4A05               	infsnz	main@num^0,f,c
   144  007EE8  2A06               	incf	(main@num+1)^0,f,c
   145  007EEA  BE06               	btfsc	(main@num+1)^0,7,c
   146  007EEC  EF81  F03F         	goto	u221
   147  007EF0  5006               	movf	(main@num+1)^0,w,c
   148  007EF2  E109               	bnz	u220
   149  007EF4  0E0A               	movlw	10
   150  007EF6  5C05               	subwf	main@num^0,w,c
   151  007EF8  A0D8               	btfss	status,0,c
   152  007EFA  EF81  F03F         	goto	u221
   153  007EFE  EF83  F03F         	goto	u220
   154  007F02                     u221:
   155  007F02  EF62  F03F         	goto	l809
   156  007F06                     u220:
   157  007F06  EF5E  F03F         	goto	l24
   158  007F0A  EF00  F000         	goto	start
   159  007F0E                     __end_of_main:
   160                           	opt callstack 0
   161                           
   162 ;; *************** function _display *****************
   163 ;; Defined at:
   164 ;;		line 15 in file "PIC_numero_ascendente.c"
   165 ;; Parameters:    Size  Location     Type
   166 ;;  num             2    0[COMRAM] int 
   167 ;; Auto vars:     Size  Location     Type
   168 ;;		None
   169 ;; Return value:  Size  Location     Type
   170 ;;                  1    wreg      void 
   171 ;; Registers used:
   172 ;;		wreg, status,2, status,0
   173 ;; Tracked objects:
   174 ;;		On entry : 0/0
   175 ;;		On exit  : 0/0
   176 ;;		Unchanged: 0/0
   177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   178 ;;      Params:         2       0       0       0       0       0       0       0       0
   179 ;;      Locals:         0       0       0       0       0       0       0       0       0
   180 ;;      Temps:          0       0       0       0       0       0       0       0       0
   181 ;;      Totals:         2       0       0       0       0       0       0       0       0
   182 ;;Total ram usage:        2 bytes
   183 ;; Hardware stack levels used:    1
   184 ;; This function calls:
   185 ;;		Nothing
   186 ;; This function is called by:
   187 ;;		_main
   188 ;; This function uses a non-reentrant model
   189 ;;
   190                           
   191                           	psect	text1
   192  007F0E                     __ptext1:
   193                           	opt callstack 0
   194  007F0E                     _display:
   195                           	opt callstack 30
   196  007F0E                     
   197                           ;PIC_numero_ascendente.c: 16:     if(num == 4){
   198  007F0E  0E00               	movlw	0
   199  007F10  6E8A               	movwf	138,c	;volatile
   200  007F12                     
   201                           ;PIC_numero_ascendente.c: 18:     }
   202  007F12  5001               	movf	display@num^0,w,c
   203  007F14  1002               	iorwf	(display@num+1)^0,w,c
   204  007F16  A4D8               	btfss	status,2,c
   205  007F18  EF90  F03F         	goto	u121
   206  007F1C  EF92  F03F         	goto	u120
   207  007F20                     u121:
   208  007F20  EF94  F03F         	goto	l767
   209  007F24                     u120:
   210  007F24                     
   211                           ;PIC_numero_ascendente.c: 19:     if(num == 5){
   212  007F24  0E3F               	movlw	63
   213  007F26  6E8A               	movwf	138,c	;volatile
   214  007F28                     l767:
   215                           
   216                           ;PIC_numero_ascendente.c: 21:     }
   217  007F28  0401               	decf	display@num^0,w,c
   218  007F2A  1002               	iorwf	(display@num+1)^0,w,c
   219  007F2C  A4D8               	btfss	status,2,c
   220  007F2E  EF9B  F03F         	goto	u131
   221  007F32  EF9D  F03F         	goto	u130
   222  007F36                     u131:
   223  007F36  EF9F  F03F         	goto	l771
   224  007F3A                     u130:
   225  007F3A                     
   226                           ;PIC_numero_ascendente.c: 22:     if(num == 6){
   227  007F3A  0E06               	movlw	6
   228  007F3C  6E8A               	movwf	138,c	;volatile
   229  007F3E                     l771:
   230                           
   231                           ;PIC_numero_ascendente.c: 24:     }
   232  007F3E  0E02               	movlw	2
   233  007F40  1801               	xorwf	display@num^0,w,c
   234  007F42  1002               	iorwf	(display@num+1)^0,w,c
   235  007F44  A4D8               	btfss	status,2,c
   236  007F46  EFA7  F03F         	goto	u141
   237  007F4A  EFA9  F03F         	goto	u140
   238  007F4E                     u141:
   239  007F4E  EFAB  F03F         	goto	l775
   240  007F52                     u140:
   241  007F52                     
   242                           ;PIC_numero_ascendente.c: 25:     if(num == 7){
   243  007F52  0E5B               	movlw	91
   244  007F54  6E8A               	movwf	138,c	;volatile
   245  007F56                     l775:
   246                           
   247                           ;PIC_numero_ascendente.c: 27:     }
   248  007F56  0E03               	movlw	3
   249  007F58  1801               	xorwf	display@num^0,w,c
   250  007F5A  1002               	iorwf	(display@num+1)^0,w,c
   251  007F5C  A4D8               	btfss	status,2,c
   252  007F5E  EFB3  F03F         	goto	u151
   253  007F62  EFB5  F03F         	goto	u150
   254  007F66                     u151:
   255  007F66  EFB7  F03F         	goto	l779
   256  007F6A                     u150:
   257  007F6A                     
   258                           ;PIC_numero_ascendente.c: 28:     if(num == 8){
   259  007F6A  0E4F               	movlw	79
   260  007F6C  6E8A               	movwf	138,c	;volatile
   261  007F6E                     l779:
   262                           
   263                           ;PIC_numero_ascendente.c: 30:     }
   264  007F6E  0E04               	movlw	4
   265  007F70  1801               	xorwf	display@num^0,w,c
   266  007F72  1002               	iorwf	(display@num+1)^0,w,c
   267  007F74  A4D8               	btfss	status,2,c
   268  007F76  EFBF  F03F         	goto	u161
   269  007F7A  EFC1  F03F         	goto	u160
   270  007F7E                     u161:
   271  007F7E  EFC3  F03F         	goto	l783
   272  007F82                     u160:
   273  007F82                     
   274                           ;PIC_numero_ascendente.c: 31:     if(num == 9){
   275  007F82  0E66               	movlw	102
   276  007F84  6E8A               	movwf	138,c	;volatile
   277  007F86                     l783:
   278                           
   279                           ;PIC_numero_ascendente.c: 33:     }
   280  007F86  0E05               	movlw	5
   281  007F88  1801               	xorwf	display@num^0,w,c
   282  007F8A  1002               	iorwf	(display@num+1)^0,w,c
   283  007F8C  A4D8               	btfss	status,2,c
   284  007F8E  EFCB  F03F         	goto	u171
   285  007F92  EFCD  F03F         	goto	u170
   286  007F96                     u171:
   287  007F96  EFCF  F03F         	goto	l787
   288  007F9A                     u170:
   289  007F9A                     
   290                           ;PIC_numero_ascendente.c: 34: }
   291  007F9A  0E6D               	movlw	109
   292  007F9C  6E8A               	movwf	138,c	;volatile
   293  007F9E                     l787:
   294                           
   295                           ;PIC_numero_ascendente.c: 36: void main(void) {
   296  007F9E  0E06               	movlw	6
   297  007FA0  1801               	xorwf	display@num^0,w,c
   298  007FA2  1002               	iorwf	(display@num+1)^0,w,c
   299  007FA4  A4D8               	btfss	status,2,c
   300  007FA6  EFD7  F03F         	goto	u181
   301  007FAA  EFD9  F03F         	goto	u180
   302  007FAE                     u181:
   303  007FAE  EFDB  F03F         	goto	l791
   304  007FB2                     u180:
   305  007FB2                     
   306                           ;PIC_numero_ascendente.c: 37: 
   307  007FB2  0E7D               	movlw	125
   308  007FB4  6E8A               	movwf	138,c	;volatile
   309  007FB6                     l791:
   310                           
   311                           ;PIC_numero_ascendente.c: 39: 
   312  007FB6  0E07               	movlw	7
   313  007FB8  1801               	xorwf	display@num^0,w,c
   314  007FBA  1002               	iorwf	(display@num+1)^0,w,c
   315  007FBC  A4D8               	btfss	status,2,c
   316  007FBE  EFE3  F03F         	goto	u191
   317  007FC2  EFE5  F03F         	goto	u190
   318  007FC6                     u191:
   319  007FC6  EFE7  F03F         	goto	l795
   320  007FCA                     u190:
   321  007FCA                     
   322                           ;PIC_numero_ascendente.c: 40:     while(1){
   323  007FCA  0E07               	movlw	7
   324  007FCC  6E8A               	movwf	138,c	;volatile
   325  007FCE                     l795:
   326                           
   327                           ;PIC_numero_ascendente.c: 42:             display(num);
   328  007FCE  0E08               	movlw	8
   329  007FD0  1801               	xorwf	display@num^0,w,c
   330  007FD2  1002               	iorwf	(display@num+1)^0,w,c
   331  007FD4  A4D8               	btfss	status,2,c
   332  007FD6  EFEF  F03F         	goto	u201
   333  007FDA  EFF1  F03F         	goto	u200
   334  007FDE                     u201:
   335  007FDE  EFF3  F03F         	goto	l799
   336  007FE2                     u200:
   337  007FE2                     
   338                           ;PIC_numero_ascendente.c: 43:             _delay((unsigned long)((600)*(48000000/4000.0)
      +                          ));
   339  007FE2  0E7F               	movlw	127
   340  007FE4  6E8A               	movwf	138,c	;volatile
   341  007FE6                     l799:
   342                           
   343                           ;PIC_numero_ascendente.c: 45:     }
   344  007FE6  0E09               	movlw	9
   345  007FE8  1801               	xorwf	display@num^0,w,c
   346  007FEA  1002               	iorwf	(display@num+1)^0,w,c
   347  007FEC  A4D8               	btfss	status,2,c
   348  007FEE  EFFB  F03F         	goto	u211
   349  007FF2  EFFD  F03F         	goto	u210
   350  007FF6                     u211:
   351  007FF6  EFFF  F03F         	goto	l19
   352  007FFA                     u210:
   353  007FFA                     
   354                           ;PIC_numero_ascendente.c: 46: 
   355  007FFA  0E67               	movlw	103
   356  007FFC  6E8A               	movwf	138,c	;volatile
   357  007FFE                     l19:
   358  007FFE  0012               	return		;funcret
   359  008000                     __end_of_display:
   360                           	opt callstack 0
   361  0000                     
   362                           	psect	rparam
   363  0000                     tosu	equ	0xFFF
   364                           tosh	equ	0xFFE
   365                           tosl	equ	0xFFD
   366                           stkptr	equ	0xFFC
   367                           pclatu	equ	0xFFB
   368                           pclath	equ	0xFFA
   369                           pcl	equ	0xFF9
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           prodh	equ	0xFF4
   375                           prodl	equ	0xFF3
   376                           indf0	equ	0xFEF
   377                           postinc0	equ	0xFEE
   378                           postdec0	equ	0xFED
   379                           preinc0	equ	0xFEC
   380                           plusw0	equ	0xFEB
   381                           fsr0h	equ	0xFEA
   382                           fsr0l	equ	0xFE9
   383                           wreg	equ	0xFE8
   384                           indf1	equ	0xFE7
   385                           postinc1	equ	0xFE6
   386                           postdec1	equ	0xFE5
   387                           preinc1	equ	0xFE4
   388                           plusw1	equ	0xFE3
   389                           fsr1h	equ	0xFE2
   390                           fsr1l	equ	0xFE1
   391                           bsr	equ	0xFE0
   392                           indf2	equ	0xFDF
   393                           postinc2	equ	0xFDE
   394                           postdec2	equ	0xFDD
   395                           preinc2	equ	0xFDC
   396                           plusw2	equ	0xFDB
   397                           fsr2h	equ	0xFDA
   398                           fsr2l	equ	0xFD9
   399                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      6       6
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_display

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     364
                                              2 COMRAM     4     4      0
                            _display
 ---------------------------------------------------------------------------------
 (1) _display                                              2     0      2     296
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _display

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      6       6       1        6.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Oct 04 13:50:55 2021

                     l24 7EBC                       l19 7FFE                      l801 7FFA  
                    l811 7ED0                      l803 7EB8                      l813 7EE6  
                    l815 7EEA                      l761 7F0E                      l809 7EC4  
                    l771 7F3E                      l763 7F12                      l781 7F82  
                    l773 7F52                      l765 7F24                      l791 7FB6  
                    l783 7F86                      l775 7F56                      l767 7F28  
                    l793 7FCA                      l785 7F9A                      l777 7F6A  
                    l769 7F3A                      l795 7FCE                      l787 7F9E  
                    l779 7F6E                      l797 7FE2                      l789 7FB2  
                    l799 7FE6                      u200 7FE2                      u120 7F24  
                    u201 7FDE                      u121 7F20                      u210 7FFA  
                    u130 7F3A                      u211 7FF6                      u131 7F36  
                    u140 7F52                      u220 7F06                      u141 7F4E  
                    u221 7F02                      u150 7F6A                      u151 7F66  
                    u160 7F82                      u161 7F7E                      u170 7F9A  
                    u171 7F96                      u180 7FB2                      u181 7FAE  
                    u237 7EDA                      u190 7FCA                      u191 7FC6  
                    wreg 000FE8             __CFG_LVP$OFF 000000                     _LATB 000F8A  
                   _main 7EB8                     start 0000             ___param_bank 000000  
          __CFG_PLLDIV$5 000000                    ?_main 0001                    _TRISB 000F93  
        __end_of_display 8000                    status 000FD8          __initialization 7EB2  
           __end_of_main 7F0E                   ??_main 0003            __activetblptr 000000  
              ??_display 0003               __accesstop 0060  __end_of__initialization 7EB2  
          ___rparam_used 000001           __pcstackCOMRAM 0001                  __Hparam 0000  
                __Lparam 0000                  __pcinit 7EB2                  __ramtop 0800  
                __ptext0 7EB8                  __ptext1 7F0E                  _display 7F0E  
                main@num 0005     end_of_initialization 7EB2               display@num 0001  
    start_initialization 7EB2                 ?_display 0001                 __Hrparam 0000  
               __Lrparam 0000         __size_of_display 00F2            __size_of_main 0056  
  __CFG_CPUDIV$OSC1_PLL2 000000       __CFG_FOSC$HSPLL_HS 000000  
